#lang eopl
;Constructores
(define th-vacio
  (lambda ()
    (list 'th-vacio)))

(define th-novacio
  (lambda (item reg)
    (list 'th-novacio item reg)))

(define itemElm
  (lambda (key dato)
    (list 'itemElm key dato)))

(define lnumvacia
  (lambda ()
    (list 'lnumvacia)))

(define lnumnovacia
  (lambda (num lst)
    (list 'lnumnovacia num lst)))

;Predicados
(define th-vacio?
  (lambda (exp)
    (equal? 'th-vacio (car exp))))

(define th-novacio?
  (lambda (exp)
    (equal? 'th-novacio (car exp))))

(define itemElm?
  (lambda (exp)
    (equal? 'itemElm (car exp))))

(define lnumvacia?
  (lambda (exp)
    (equal? 'lnumvacia (car exp))))

(define lnumnovacia?
  (lambda (exp)
    (equal? 'lnumnovacia (car exp))))

;Extractores
(define th-novacio->item
  (lambda (th-novacio)
    (cadr th-novacio)))

(define th-novacio->reg
  (lambda (th-novacio)
    (caddr th-novacio)))

(define itemElm->key
  (lambda (itemElm)
    (cadr itemElm)))

(define itemElm->dato
  (lambda (itemElm)
    (caddr itemElm)))

(define lnumnovacia->num
  (lambda (lnumnovacia)
    (cadr lnumnovacia)))

(define lnumnovacia->lst
  (lambda (lnumnovacia)
    (caddr lnumnovacia)))

;Area del programador
;1.1.1
(define buscar-llave
  (lambda (simbolo th)
    (cond
      [(th-vacio? th) '()]
      [(th-novacio? th)
       (let
           ([item (th-novacio->item th)])
         (if
          (itemElm? item)
          (if (equal? (itemElm->key item) simbolo)
              (itemElm->dato item)
              (buscar-llave simbolo (th-novacio->reg th))
              )
          (eopl:error "un elemento no es de tipo itemElm")
          )
         )]
      [else eopl:error "error 123"]
      )
    )
  )

(define sumar-valores
  (lambda (th)
    (cond
      [(th-vacio? th) '()]
      [(th-novacio? th)
       (letrec
            ([item (th-novacio->item th)]
             [sumar-lista (lambda (lnum)
                       (cond
                         [(lnumvacia? lnum) 0]
                         [else (+ (lnumnovacia->num lnum) (sumar-lista (lnumnovacia->lst lnum)))]
                         )
                       )]
             )         
         (cons (list (itemElm->key item) (sumar-lista (itemElm->dato item))) (sumar-valores (th-novacio->reg th)))
           )
       ]
      [else eopl:error "error 2"]
    )
  )
)



;f = {a : ’ ( 1 2 3 ) , b : ’ ( 1 ) , c : ’ ( 1 , 2 ) }
(define f (th-novacio (itemElm 'a (lnumnovacia 1 (lnumnovacia 2 (lnumnovacia 3 (lnumvacia)))))
                       (th-novacio (itemElm 'b (lnumnovacia 1 (lnumvacia)))
                                   (th-novacio (itemElm 'c (lnumnovacia 1 (lnumnovacia 2 (lnumvacia))))(th-vacio)))))

(buscar-llave 'a f)
(sumar-valores f)