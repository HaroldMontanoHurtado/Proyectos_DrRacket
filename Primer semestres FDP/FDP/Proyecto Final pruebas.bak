;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname |Proyecto Final pruebas|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #t #t none #f () #f)))
;Teachpack
(require 2htdp/batch-io)
;estructuras
(define-struct Libro (titulo autores lugarDePublicacion añoDePublicación ISBN
                             materiasQueCubre clasificacion numDeEjemplares))

(define-struct estudiante (nombre programa codigo))
(define-struct profesor (nombre cedula))
(define-struct funcionario (nombre cedula dependenciaDeTrabajo))
;-----------------------------------------------------------------
(define (texto->num lis)
  (if
   (string-numeric? lis)
   (string->number lis)
   lis))
(define (list-num lis)
  (local [
          (define (lis-n lst)
            (cond
              [(empty? lst) empty]
              [(cons? lst) (cons (texto->num (first lst)) (lis-n (rest lst)))]
              [else (lis-n (rest lst))]
              ))
          ]
    (cond
      [(empty? lis) empty]
      [(cons? lis) (cons (lis-n (first lis)) (list-num (rest lis)))]
      [else (list-num (rest lis))]
     )))
;--------------------------------------------------------------------------------
(define (listaLibros lis) 
  (local [
          (define (list->libro lis)
            (if
             (list? lis)
             (make-Libro (texto->num (first lis)) ;titulo
                         (texto->num (second lis)) ;autores
                         (texto->num (third lis)) ;lugar de Publicacion
                         (texto->num (fourth lis)) ;año de Publicacion
                         (texto->num (fifth lis)) ;ISBN
                         (texto->num (sixth lis)) ;materias
                         (texto->num (seventh lis)) ;Calificacion
                         (texto->num (eighth lis)) ;cantidad de Ejemplares
                         )
             (error "no es una lista tipo Libro")
             ))
          ]
    (cond
      [(empty? lis) empty]
      [else
       (local [
               (define primero (first lis))
               (define resto (rest lis))
               (define estructuraLibro (list->libro primero))
               (define recursion (listaLibros resto))
               ]
         (cond
           [(cons? primero)
            (cons estructuraLibro recursion)]
           [else (cons primero recursion)]
           )
         )]
      ))
  )
;------------------------------------------------------------------
(define (ingresar-profesor lis)
            (if
             (list? lis)
             (make-profesor (texto->num (first lis)) ;nombre
                            (texto->num (second lis)) ;cedula
                            )
             (error "no es una lista tipo estudiante")
             ))
;--------------------------------------------------------------
(define (ingresar-estudiante lis)
            (if
             (list? lis)
             (make-estudiante (texto->num (first lis)) ;nombre
                              (texto->num (second lis)) ;programa
                              (texto->num (third lis)) ;codigo
                              )
             (error "no es una lista tipo estudiante")
             ))
;----------------------------------------------------------------
(define (ingresar-funcionario lis)
            (if
             (list? lis)
             (make-funcionario (texto->num (first lis)) ;nombre
                               (texto->num (second lis)) ;cedula
                               (texto->num (third lis)) ;dependencia De Trabajo
                               )
             (error "no es una lista tipo estudiante")
             ))
;------------------------------------------------------------------
(define (cargar-datos link-libros link-usuarios)
  (list (listaLibros (read-words/line link-libros))
        (local [
                (define listaUsuarios (read-words/line link-usuarios))
                (define (elegirUsuario x)
                  (local [
                          (define tercero (third (first listaConvertida)))
                          (define listaConvertida (list-num (read-words/line x)))
                          ]
                    (cond
                      [(empty? x) empty]
                      [(eq? (length (first listaConvertida)) 2)
                       (ingresar-profesor listaConvertida)]
                      [(eq? (length (first listaConvertida)) 3)
                       (cond
                         [(empty? x) empty]
                         [(number? tercero)
                          (cons (ingresar-estudiante (first x)) (elegirUsuario (rest x)))]
                         [(string? tercero)
                          (cons (ingresar-funcionario (first x)) (elegirUsuario (rest x)))]
                         [else  (elegirUsuario (rest x))]
                         )]
                      )))
                ]
          (elegirUsuario listaUsuarios)
          )))
(define lisUsuarios (read-words/line "data/usuarios.txt"))